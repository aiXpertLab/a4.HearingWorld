package com.seeingvoice.www.svhearing.database.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.seeingvoice.www.svhearing.database.StringConverter;
import java.util.List;

import com.seeingvoice.www.svhearing.database.entity.PureTestResult;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "PURE_TEST_RESULT".
*/
public class PureTestResultDao extends AbstractDao<PureTestResult, Long> {

    public static final String TABLENAME = "PURE_TEST_RESULT";

    /**
     * Properties of entity PureTestResult.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property ID = new Property(0, Long.class, "ID", true, "_id");
        public final static Property TimeStamp = new Property(1, String.class, "timeStamp", false, "TIME_STAMP");
        public final static Property IMEI = new Property(2, String.class, "IMEI", false, "IMEI");
        public final static Property MLeftResult = new Property(3, String.class, "mLeftResult", false, "M_LEFT_RESULT");
        public final static Property MRightResult = new Property(4, String.class, "mRightResult", false, "M_RIGHT_RESULT");
        public final static Property USER_ID = new Property(5, Long.class, "USER_ID", false, "USER__ID");
        public final static Property Remark = new Property(6, String.class, "remark", false, "REMARK");
    }

    private final StringConverter mLeftResultConverter = new StringConverter();
    private final StringConverter mRightResultConverter = new StringConverter();

    public PureTestResultDao(DaoConfig config) {
        super(config);
    }
    
    public PureTestResultDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"PURE_TEST_RESULT\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: ID
                "\"TIME_STAMP\" TEXT," + // 1: timeStamp
                "\"IMEI\" TEXT," + // 2: IMEI
                "\"M_LEFT_RESULT\" TEXT," + // 3: mLeftResult
                "\"M_RIGHT_RESULT\" TEXT," + // 4: mRightResult
                "\"USER__ID\" INTEGER," + // 5: USER_ID
                "\"REMARK\" TEXT);"); // 6: remark
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"PURE_TEST_RESULT\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, PureTestResult entity) {
        stmt.clearBindings();
 
        Long ID = entity.getID();
        if (ID != null) {
            stmt.bindLong(1, ID);
        }
 
        String timeStamp = entity.getTimeStamp();
        if (timeStamp != null) {
            stmt.bindString(2, timeStamp);
        }
 
        String IMEI = entity.getIMEI();
        if (IMEI != null) {
            stmt.bindString(3, IMEI);
        }
 
        List mLeftResult = entity.getMLeftResult();
        if (mLeftResult != null) {
            stmt.bindString(4, mLeftResultConverter.convertToDatabaseValue(mLeftResult));
        }
 
        List mRightResult = entity.getMRightResult();
        if (mRightResult != null) {
            stmt.bindString(5, mRightResultConverter.convertToDatabaseValue(mRightResult));
        }
 
        Long USER_ID = entity.getUSER_ID();
        if (USER_ID != null) {
            stmt.bindLong(6, USER_ID);
        }
 
        String remark = entity.getRemark();
        if (remark != null) {
            stmt.bindString(7, remark);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, PureTestResult entity) {
        stmt.clearBindings();
 
        Long ID = entity.getID();
        if (ID != null) {
            stmt.bindLong(1, ID);
        }
 
        String timeStamp = entity.getTimeStamp();
        if (timeStamp != null) {
            stmt.bindString(2, timeStamp);
        }
 
        String IMEI = entity.getIMEI();
        if (IMEI != null) {
            stmt.bindString(3, IMEI);
        }
 
        List mLeftResult = entity.getMLeftResult();
        if (mLeftResult != null) {
            stmt.bindString(4, mLeftResultConverter.convertToDatabaseValue(mLeftResult));
        }
 
        List mRightResult = entity.getMRightResult();
        if (mRightResult != null) {
            stmt.bindString(5, mRightResultConverter.convertToDatabaseValue(mRightResult));
        }
 
        Long USER_ID = entity.getUSER_ID();
        if (USER_ID != null) {
            stmt.bindLong(6, USER_ID);
        }
 
        String remark = entity.getRemark();
        if (remark != null) {
            stmt.bindString(7, remark);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public PureTestResult readEntity(Cursor cursor, int offset) {
        PureTestResult entity = new PureTestResult( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // ID
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // timeStamp
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // IMEI
            cursor.isNull(offset + 3) ? null : mLeftResultConverter.convertToEntityProperty(cursor.getString(offset + 3)), // mLeftResult
            cursor.isNull(offset + 4) ? null : mRightResultConverter.convertToEntityProperty(cursor.getString(offset + 4)), // mRightResult
            cursor.isNull(offset + 5) ? null : cursor.getLong(offset + 5), // USER_ID
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6) // remark
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, PureTestResult entity, int offset) {
        entity.setID(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setTimeStamp(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setIMEI(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setMLeftResult(cursor.isNull(offset + 3) ? null : mLeftResultConverter.convertToEntityProperty(cursor.getString(offset + 3)));
        entity.setMRightResult(cursor.isNull(offset + 4) ? null : mRightResultConverter.convertToEntityProperty(cursor.getString(offset + 4)));
        entity.setUSER_ID(cursor.isNull(offset + 5) ? null : cursor.getLong(offset + 5));
        entity.setRemark(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(PureTestResult entity, long rowId) {
        entity.setID(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(PureTestResult entity) {
        if(entity != null) {
            return entity.getID();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(PureTestResult entity) {
        return entity.getID() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
